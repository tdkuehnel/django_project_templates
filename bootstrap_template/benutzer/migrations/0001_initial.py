# Generated by Django 3.2.6 on 2021-11-29 17:04

import benutzer.models
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Benutzer',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.AutoField(db_column='bnz_id', primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(blank=True, db_column='bnz_bname', max_length=64, null=True, unique=True, verbose_name='Benutzername')),
                ('email', models.EmailField(blank=True, db_column='bnz_email', default='', max_length=128, verbose_name='e. Postadresse')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Benutzer',
                'verbose_name_plural': 'Benutzer',
                'db_table': 'benutzer',
                'permissions': [('redakteur', 'Redakteur')],
            },
            managers=[
                ('objects', benutzer.models.BenutzerManager()),
            ],
        ),
    ]
